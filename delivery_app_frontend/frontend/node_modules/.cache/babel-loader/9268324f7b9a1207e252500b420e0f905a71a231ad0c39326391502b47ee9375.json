{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: \"FormRegisterConsumers\",\n  props: {\n    isVisible: {\n      type: Boolean,\n      required: true\n    }\n  },\n  data() {\n    return {\n      nomeCompleto: \"\",\n      cpf: \"\",\n      dataNascimento: \"\",\n      tipoPessoa: 1\n    };\n  },\n  methods: {\n    formatCPF(cpf) {\n      const numbers = cpf.replace(/\\D/g, \"\");\n      if (numbers.length === 11) {\n        return `${numbers.slice(0, 3)}.${numbers.slice(3, 6)}.${numbers.slice(6, 9)}-${numbers.slice(9)}`;\n      }\n      return cpf;\n    },\n    formatDateOfBirth(date) {\n      const parsedDate = new Date(date);\n      const year = parsedDate.getFullYear();\n      const month = String(parsedDate.getMonth() + 1).padStart(2, \"0\"); // Adiciona 1 ao mês e preenche com zero\n      const day = String(parsedDate.getDate()).padStart(2, \"0\"); // Preenche com zero\n      return `${year}-${month}-${day}`;\n    },\n    async addClient() {\n      const formattedCpf = this.formatCPF(this.cpf);\n      const formattedDateOfBirth = this.formatDateOfBirth(this.dataNascimento);\n      const newClient = {\n        nome_completo: this.nomeCompleto,\n        tipo_pessoa: Number(this.tipoPessoa),\n        cpf: formattedCpf,\n        data_nascimento: formattedDateOfBirth,\n        // Data formatada\n        tipo_cadastro: 2\n      };\n      try {\n        await axios.post(\"http://localhost:8000/api/v2/clientes\", newClient);\n        this.closeModal(); // Feche o modal após a operação\n      } catch (error) {\n        console.error(\"Erro ao adicionar cliente:\", error);\n      }\n    },\n    closeModal() {\n      // Emitir evento para o componente pai\n      this.$emit(\"update:isVisible\", false);\n      this.resetForm(); // Resetar o formulário ao fechar\n    },\n    resetForm() {\n      this.nomeCompleto = \"\";\n      this.cpf = \"\";\n      this.dataNascimento = \"\";\n      this.tipoPessoa = 1;\n    }\n  }\n};","map":{"version":3,"names":["axios","name","props","isVisible","type","Boolean","required","data","nomeCompleto","cpf","dataNascimento","tipoPessoa","methods","formatCPF","numbers","replace","length","slice","formatDateOfBirth","date","parsedDate","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","addClient","formattedCpf","formattedDateOfBirth","newClient","nome_completo","tipo_pessoa","Number","data_nascimento","tipo_cadastro","post","closeModal","error","console","$emit","resetForm"],"sources":["C:\\Gabriel\\Codes\\SGMW\\resources\\delivery_app_frontend\\frontend\\src\\views\\components\\Forms\\FormRegisterConsumers.vue"],"sourcesContent":["<template>\r\n  <div\r\n    v-if=\"isVisible\"\r\n    class=\"modal fade show\"\r\n    style=\"display: block\"\r\n    tabindex=\"-1\"\r\n  >\r\n    <div class=\"modal-dialog\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\">Adicionar Cliente</h5>\r\n          <button type=\"button\" class=\"btn styledb\" @click=\"closeModal\">\r\n            <i class=\"material-icons-round opacity-10\" aria-hidden=\"true\"\r\n              >close</i\r\n            >\r\n          </button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <form @submit.prevent=\"addClient\">\r\n            <div class=\"mb-3\">\r\n              <label for=\"nomeCompleto\" class=\"form-label\">Nome Completo</label>\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control border p-2\"\r\n                id=\"nomeCompleto\"\r\n                v-model=\"nomeCompleto\"\r\n                required\r\n              />\r\n            </div>\r\n            <div class=\"mb-3\">\r\n              <label for=\"cpf\" class=\"form-label\">CPF</label>\r\n              <input\r\n                type=\"text\"\r\n                class=\"form-control border p-2\"\r\n                id=\"cpf\"\r\n                v-model=\"cpf\"\r\n                required\r\n              />\r\n            </div>\r\n            <div class=\"mb-3\">\r\n              <label for=\"dataNascimento\" class=\"form-label\"\r\n                >Data de Nascimento</label\r\n              >\r\n              <input\r\n                type=\"date\"\r\n                class=\"form-control border p-2\"\r\n                id=\"dataNascimento\"\r\n                v-model=\"dataNascimento\"\r\n                required\r\n              />\r\n            </div>\r\n            <div class=\"mb-3\">\r\n              <label for=\"tipoPessoa\" class=\"form-label\">Tipo de Pessoa</label>\r\n              <select\r\n                class=\"form-select border p-2\"\r\n                v-model=\"tipoPessoa\"\r\n                required\r\n              >\r\n                <option value=\"1\">Física</option>\r\n                <option value=\"2\">Jurídica</option>\r\n              </select>\r\n            </div>\r\n            <button type=\"submit\" class=\"btn btn-dark\">Salvar</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div v-if=\"isVisible\" class=\"modal-backdrop fade show\"></div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"FormRegisterConsumers\",\r\n  props: {\r\n    isVisible: {\r\n      type: Boolean,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      nomeCompleto: \"\",\r\n      cpf: \"\",\r\n      dataNascimento: \"\",\r\n      tipoPessoa: 1,\r\n    };\r\n  },\r\n  methods: {\r\n    formatCPF(cpf) {\r\n      const numbers = cpf.replace(/\\D/g, \"\");\r\n      if (numbers.length === 11) {\r\n        return `${numbers.slice(0, 3)}.${numbers.slice(3, 6)}.${numbers.slice(\r\n          6,\r\n          9\r\n        )}-${numbers.slice(9)}`;\r\n      }\r\n      return cpf;\r\n    },\r\n\r\n    formatDateOfBirth(date) {\r\n      const parsedDate = new Date(date);\r\n      const year = parsedDate.getFullYear();\r\n      const month = String(parsedDate.getMonth() + 1).padStart(2, \"0\"); // Adiciona 1 ao mês e preenche com zero\r\n      const day = String(parsedDate.getDate()).padStart(2, \"0\"); // Preenche com zero\r\n      return `${year}-${month}-${day}`;\r\n    },\r\n\r\n    async addClient() {\r\n      const formattedCpf = this.formatCPF(this.cpf);\r\n      const formattedDateOfBirth = this.formatDateOfBirth(this.dataNascimento);\r\n\r\n      const newClient = {\r\n        nome_completo: this.nomeCompleto,\r\n        tipo_pessoa: Number(this.tipoPessoa),\r\n        cpf: formattedCpf,\r\n        data_nascimento: formattedDateOfBirth, // Data formatada\r\n        tipo_cadastro: 2,\r\n      };\r\n\r\n      try {\r\n        await axios.post(\"http://localhost:8000/api/v2/clientes\", newClient);\r\n        this.closeModal(); // Feche o modal após a operação\r\n      } catch (error) {\r\n        console.error(\"Erro ao adicionar cliente:\", error);\r\n      }\r\n    },\r\n\r\n    closeModal() {\r\n      // Emitir evento para o componente pai\r\n      this.$emit(\"update:isVisible\", false);\r\n      this.resetForm(); // Resetar o formulário ao fechar\r\n    },\r\n\r\n    resetForm() {\r\n      this.nomeCompleto = \"\";\r\n      this.cpf = \"\";\r\n      this.dataNascimento = \"\";\r\n      this.tipoPessoa = 1;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.modal-backdrop {\r\n  opacity: 0.5;\r\n}\r\n\r\n.styledb {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n</style>\r\n"],"mappings":"AAwEA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,uBAAuB;EAC7BC,KAAK,EAAE;IACLC,SAAS,EAAE;MACTC,IAAI,EAAEC,OAAO;MACbC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,EAAE;MAChBC,GAAG,EAAE,EAAE;MACPC,cAAc,EAAE,EAAE;MAClBC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,SAASA,CAACJ,GAAG,EAAE;MACb,MAAMK,OAAM,GAAIL,GAAG,CAACM,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;MACtC,IAAID,OAAO,CAACE,MAAK,KAAM,EAAE,EAAE;QACzB,OAAO,GAAGF,OAAO,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,IAAIH,OAAO,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,IAAIH,OAAO,CAACG,KAAK,CACnE,CAAC,EACD,CACF,CAAC,IAAIH,OAAO,CAACG,KAAK,CAAC,CAAC,CAAC,EAAE;MACzB;MACA,OAAOR,GAAG;IACZ,CAAC;IAEDS,iBAAiBA,CAACC,IAAI,EAAE;MACtB,MAAMC,UAAS,GAAI,IAAIC,IAAI,CAACF,IAAI,CAAC;MACjC,MAAMG,IAAG,GAAIF,UAAU,CAACG,WAAW,CAAC,CAAC;MACrC,MAAMC,KAAI,GAAIC,MAAM,CAACL,UAAU,CAACM,QAAQ,CAAC,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;MAClE,MAAMC,GAAE,GAAIH,MAAM,CAACL,UAAU,CAACS,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;MAC3D,OAAO,GAAGL,IAAI,IAAIE,KAAK,IAAII,GAAG,EAAE;IAClC,CAAC;IAED,MAAME,SAASA,CAAA,EAAG;MAChB,MAAMC,YAAW,GAAI,IAAI,CAAClB,SAAS,CAAC,IAAI,CAACJ,GAAG,CAAC;MAC7C,MAAMuB,oBAAmB,GAAI,IAAI,CAACd,iBAAiB,CAAC,IAAI,CAACR,cAAc,CAAC;MAExE,MAAMuB,SAAQ,GAAI;QAChBC,aAAa,EAAE,IAAI,CAAC1B,YAAY;QAChC2B,WAAW,EAAEC,MAAM,CAAC,IAAI,CAACzB,UAAU,CAAC;QACpCF,GAAG,EAAEsB,YAAY;QACjBM,eAAe,EAAEL,oBAAoB;QAAE;QACvCM,aAAa,EAAE;MACjB,CAAC;MAED,IAAI;QACF,MAAMtC,KAAK,CAACuC,IAAI,CAAC,uCAAuC,EAAEN,SAAS,CAAC;QACpE,IAAI,CAACO,UAAU,CAAC,CAAC,EAAE;MACrB,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IAEDD,UAAUA,CAAA,EAAG;MACX;MACA,IAAI,CAACG,KAAK,CAAC,kBAAkB,EAAE,KAAK,CAAC;MACrC,IAAI,CAACC,SAAS,CAAC,CAAC,EAAE;IACpB,CAAC;IAEDA,SAASA,CAAA,EAAG;MACV,IAAI,CAACpC,YAAW,GAAI,EAAE;MACtB,IAAI,CAACC,GAAE,GAAI,EAAE;MACb,IAAI,CAACC,cAAa,GAAI,EAAE;MACxB,IAAI,CAACC,UAAS,GAAI,CAAC;IACrB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}